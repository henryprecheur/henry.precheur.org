title: Password strength meter -- doing is right

When securing a system with a password, you have 2 enemies: the password
cracker, and ... the user. The user is an enemy because —most of time— he cares
about convenience, not about security. A password stands between him and what he
wants to accomplish.

To secure the system you need a password that's hard to guess. The problem is
that the user wants something that's easy to remember. Hard-to-guess &
easy-to-remember are kind of opposites. That's why we need to give the user a
feedback about his password. He should know that '12345' is weak, that
'flowerlover' is better, and '1 like singing in the rain*' is much better.

Password strength meter: what exists
====================================

I've been looking for a password strength checker. Those I found online aren't
good. They use custom algorithms, most of them using points. The algorithms
check if the password have certain characteristics and give points if for each
of them. For example 1 point for having a letter, 1 point for having a digit, 3
points for having a non-alpha-numeric symbol, & 1 points per characters.

For example the password 'passw0rd' would get something like:

> 1 (letter) + 1 (digit) + 8 (8 characters) = 10 points

[passwordmeter.com] [1] is a quite typical one. I don't intent to pick on this
one particularly, it's just that it displays how the score is calculated and the
flaws are easier to see.

What's the problem?
===================

Those custom algorithms do more or less the job. But they will give `password1`
or `a1b2c3` a decent score while those passwords are very vulnerable. A brute
force password cracker would try them early because they are common.

Also I found that those custom algorithm have a weakness dependant of they
points system. They'll reward very well certain kind of passwords. For example
some will give you a great deal of points for each additional symbols, so
something like '!@#$%' will have a much better score than 'I like chocolate',
even though the later is stronger.

The main grief I have against those custom algorithms is that they tend to be
complex. For example passwordmeter.com tries to avoid bad practice like
sequential numbers or letters (1234 or abcd ...) but doesn't protect against
easy-to-type on the keyboard sequence like 'qwerty'. 'qwerty123' is rated good
for example.

Those kind of adjustments are a losing battle, you'll always need to add an
extra one. That's not general enough.

Simpler and better
==================

Strength and entropy
--------------------

It's possible to calculate password strength better with just a few lines of
code by using [entropy] [2]. Entropy is how much information a message contains.
The text '0' contains very little information, but the text '0000000000'
contains more information because it contains 10 times as many digits. The text
'00000000' contains little information because it's only zeros, '43172984' has
more information because it uses more digits even if it's as long as '00000000'.
This is a gross simplification of what entropy is, but it should give you the
idea. This idea is that the entropy of a password is representative of its
strength. A password with a low entropy is likely to be easy guess.


I've written my own password strength checker:

<script src='password.js'></script>

<input size='40' id='password'>

OK, now how does it work?

[1]: http://www.passwordmeter.com/
[2]: http://en.wikipedia.org/wiki/Entropy_%28information_theory%29
